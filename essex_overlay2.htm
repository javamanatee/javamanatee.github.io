<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Braintree Essex Map Overlay</title>
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
  
      .slidecontainer {
	     position: absolute;
         width: 50%;
		 bottom: 0px;
      }

      .slider {
        -webkit-appearance: none;
        width: 100%;
        height: 25px;
        background: #d3d3d3;
        outline: none;
        opacity: 0.7;
        -webkit-transition: .2s;
        transition: opacity .2s;
      }

      .slider:hover {
        opacity: 1;
      }
      
      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 25px;
        height: 25px;
        background: #4CAF50;
        cursor: pointer;
      }
      
      .slider::-moz-range-thumb {
       width: 25px;
       height: 25px;
       background: #4CAF50;
       cursor: pointer;
      }

    </style>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD98pGKJJ_aN0qfPA1Oo8I2ueWGD6tLW3w"></script>
    <script>
      // This example creates a custom overlay called MapOverlay, containing
      // a U.S. Geological Survey (USGS) image of the relevant area on the map.

      // Set the custom overlay object's prototype to a new instance
      // of OverlayView. In effect, this will subclass the overlay class therefore
      // it's simpler to load the API synchronously, using
      // google.maps.event.addDomListener().
      // Note that we set the prototype to an instance, rather than the
      // parent class itself, because we do not wish to modify the parent class.

      var overlay;
      MapOverlay.prototype = new google.maps.OverlayView();

      // Initialize the map and the custom overlay.

      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 11,
          center: {lat: 51.9, lng: 0.60},
          mapTypeId: 'roadmap'
        });

        var bounds = new google.maps.LatLngBounds(
            new google.maps.LatLng(51.835, 0.187),  // 51.838, 0.473
            new google.maps.LatLng(51.978, 0.490)); // 51.973, 0.752 

        // The photograph is courtesy of the U.S. Geological Survey.
        //var srcImage = 'https://developers.google.com/maps/documentation/' +
        //    'javascript/examples/full/images/talkeetna.png';
        var srcImage = 'wethersfield-test2.jpg'

        // The custom MapOverlay object contains the USGS image,
        // the bounds of the image, and a reference to the map.
        overlay = new MapOverlay(bounds, srcImage, map);
      }

      /** @constructor */
      function MapOverlay(bounds, image, map) {

        // Initialize all properties.
        this.bounds_ = bounds;
        this.image_ = image;
        this.map_ = map;
        this.sliderVal = 50;

        // Define a property to hold the image's div. We'll
        // actually create this div upon receipt of the onAdd()
        // method so we'll leave it null for now.
        this.div_ = null;

        // Explicitly call setMap on this overlay.
        this.setMap(map);
      }

      /**
       * onAdd is called when the map's panes are ready and the overlay has been
       * added to the map.
       */
      MapOverlay.prototype.onAdd = function() {

        var div = document.createElement('div');
        div.style.borderStyle = 'none';
        div.style.borderWidth = '0px';
        div.style.position = 'absolute';

        // Create the img element and attach it to the div.
        var img = document.createElement('img');
        img.src = this.image_;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.position = 'absolute';
        div.appendChild(img);

        this.div_ = div;

        // Add the element to the "overlayLayer" pane.
        var panes = this.getPanes();
        panes.overlayLayer.appendChild(div);
      };

      MapOverlay.prototype.draw = function() {

        // We use the south-west and north-east
        // coordinates of the overlay to peg it to the correct position and size.
        // To do this, we need to retrieve the projection from the overlay.
        var overlayProjection = this.getProjection();

        // Retrieve the south-west and north-east coordinates of this overlay
        // in LatLngs and convert them to pixel coordinates.
        // We'll use these coordinates to resize the div.
        var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
        var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

        // Resize the image's div to fit the indicated dimensions.
        var div = this.div_;
        div.style.left = sw.x + 'px';
        div.style.top = ne.y + 'px';
        div.style.width = (ne.x - sw.x) + 'px';
        div.style.height = (sw.y - ne.y) + 'px';
      };

      // The onRemove() method will be called automatically from the API if
      // we ever set the overlay's map property to 'null'.
      MapOverlay.prototype.onRemove = function() {
        this.div_.parentNode.removeChild(this.div_);
        this.div_ = null;
      };

		// Set the visibility to 'hidden' or 'visible'.
		MapOverlay.prototype.hide = function() {
		  if (this.div_) {
			// The visibility property must be a string enclosed in quotes.
			this.div_.style.visibility = 'hidden';
		  }
		};

		MapOverlay.prototype.show = function() {
		  if (this.div_) {
			this.div_.style.visibility = 'visible';
		  }
		};

		MapOverlay.prototype.toggle = function() {
		  if (this.div_) {
			if (this.div_.style.visibility === 'hidden') {
			  this.show();
			} else {
			  this.hide();
			}
		  }
		};
		
		MapOverlay.prototype.adjust = function() {
		   if (this.div_) {
		     sliderDecimal = sliderVal / 100;
		     this.div_.style.opacity = sliderDecimal.toString();
		}
      }
      google.maps.event.addDomListener(window, 'load', initMap);
    </script>
  </head>
  <body>
    <div id="map"></div>
    <!-- Add slider to control opacity of the overlay -->
    <div class="slidecontainer">
      <input type="range" min="1" max="100" value="50" class="slider" id="myRange">
    </div>
	
    <script>
	// Has to come after slider definition in HTML
	var slider = document.getElementById("myRange");
	sliderVal = slider.value;
    slider.oninput = function() {
	   sliderVal = slider.value;
       overlay.adjust();
    } 
    </script>	
  </body>
</html>